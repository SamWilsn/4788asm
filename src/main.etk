#  _  _     ___   _  _    _  _                          
# | || |   ( _ ) | || |  | || |    __ _  ___  _ __ ___  
# | || |_  / _ \ | || |_ | || |_  / _` |/ __|| '_ ` _ \ 
# |__   _|| (_) ||__   _||__   _|| (_| |\__ \| | | | | |
#    |_|   \___/    |_|     |_|   \__,_||___/|_| |_| |_|
#
# This is an implementation of EIP-4788's predeploy contract. It implements two
# ring buffers to create bounded beacon root lookup. The first ring buffer is a
# timestamp % rootmod -> timestamp mapping. This is used to ensure timestamp
# argument actually matches the stored root and isn't different dividend. The
# second ring buffer store the beacon root. It's also keyed by timestamp %
# rootmod and the shifted right by rootmod so the two don't overlap.
#
# The ring buffers can be visualized as follows:
#
#  rootmod = 10
# |--------------|--------------|
# 0             10              20
#   timestamps     beacon roots


# -----------------------------------------------------------------------------
# MACROS ----------------------------------------------------------------------
# -----------------------------------------------------------------------------

# rootmod returns the HISTORICAL_ROOTS_MODULUS as defined in the EIP.
%def rootmod()
        98304
%end

# sysaddr is the address which calls the contract to submit a new root.
%def sysaddr()
        0xfffffffffffffffffffffffffffffffffffffffe
%end

# get_input loads the first word of input from calldata.
%macro get_input()
        push0           # [0]
        calldataload    # [calldata[0..32]]
%end

%macro revert()
        push0           # [0]
        push0           # [0, 0]
        revert          # []
%end

# -----------------------------------------------------------------------------
# MACROS END ------------------------------------------------------------------
# -----------------------------------------------------------------------------
        
# Protect the submit routine by verifying the caller is equal to sysaddr().
caller            # [caller]
push20 sysaddr()  # [sysaddr, caller] 
eq                # [sysaddr == caller]
push1 submit      # [submitaddr, sysaddr == caller]
jumpi             # []

# Fallthrough if addresses don't match -- this means the caller intends to read
# a root.

# -----------------------------------------------------------------------------
# READ ROOT -------------------------------------------------------------------
# -----------------------------------------------------------------------------

# Check if calldata is equal to 32 bytes.
push1 32        # [32]
calldatasize    # [calldatasize, 32]
eq              # [calldatasize == 32]

# Jump to continue if length-check passed, otherwise revert.
push1 loadts    # [loadts_addr, calldatasize == 32]
jumpi           # []
%revert()       # []

# Load stored timestamp.
loadts:
jumpdest
push3 rootmod() # [rootmod]
%get_input()    # [time, rootmod]
mod             # [time_index]
dup1            # [time_index, time_index]
sload           # [timestamp, time_index]

# Verify stored timestamp matches input.
%get_input()    # [input, timestamp, time_index]
eq              # [input == timestamp, time_index]
push1 loadroot  # [loadroot_addr, input == timestamp, time_index]
jumpi           # [time_index]
%revert()       # []

# Extend index to get root index.
loadroot:
jumpdest
push3 rootmod() # [rootmod, time_index]
add             # [root_index]
sload           # [root]

push0           # [0, root]
mstore          # []

push1 32        # [size]
push0           # [offset, size]
return          # []

# -----------------------------------------------------------------------------
# READ ROOT END ---------------------------------------------------------------
# -----------------------------------------------------------------------------

# -----------------------------------------------------------------------------
# SUBMIT ----------------------------------------------------------------------
# -----------------------------------------------------------------------------

submit:
jumpdest                # []

# calculates the index the timestamp should be stored at (time_index = (time % rootmod).
push3 rootmod()         # [rootmod]
timestamp               # [time, rootmod]
mod                     # [time % rootmod]

timestamp               # [time, time_index]
dup2                    # [time_index, time, time_index]
sstore                  # [time_index]

push0                   # [0, time_index]
calldataload            # [root, time_index]
swap1                   # [time_index, root]
push3 rootmod()         # [rootmod, time_index, root]
add                     # [root_index, root]
sstore                  # []

stop                    # []

# -----------------------------------------------------------------------------
# SUBMIT END ------------------------------------------------------------------
# -----------------------------------------------------------------------------
