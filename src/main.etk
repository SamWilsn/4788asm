# push0 pushes zero to the stack.
# TODO: replace with push0 when it's added to etk
%macro push0()
        push1 0
%end

# rootmod returns the HISTORICAL_ROOTS_MODULUS as defined in the EIP.
%def rootmod()
        98304
%end

# get_input loads the first word of input from calldata.
%macro get_input()
        %push0()
        calldataload
%end

# get_timestamp_index calculates the index a timestamp should be stored at.
%macro get_timestamp_index()
        push3 rootmod()
        timestamp
        mod
%end
        
# If caller is from system, jump to update_func.
caller
push20 0xfffffffffffffffffffffffffffffffffffffffe
eq
push1 update_func
jumpi

########
# READ #
########

# Check if calldata is equal to 32 bytes.
push1 32        # [32]
calldatasize    # [calldatasize, 32]
eq              # [calldatasize == 32]

# Jump to continue if length-check passed, otherwise revert.
push1 load      # [revert_addr, calldatasize == 32]
jumpi           # []

%push0()        # [0]
%push0()        # [0, 0]
revert          # []

# Load stored timestamp.
load: 
jumpdest        # []
push3 rootmod() # [hrm]
%get_input()    # [time, hrm]
mod             # [time_index]
dup1            # [time_index, time_index]
sload           # [want, time_index]

# Verify stored timestamp matches input.
%get_input()    # [got, want, time_index]
eq              # [got == want, time_index]
iszero          # [got != want, time_index]
push1 exit      # [revert_addr, got != want, time_index]
jumpi           # [time_index]

# Extend index to get root index.
push3 rootmod() # [hrm, time_index]
add             # [root_index]
sload           # [root]

%push0()        # [0, root]
mstore          # []

exit: 
push1 32        # [size]
%push0()        # [offset, size]
return          # []

##########
# UPDATE #
##########

update_func:
jumpdest
timestamp               # [time]
%get_timestamp_index()  # [time_index, time]
sstore                  # []

%push0()                # [0]
calldataload            # [root]
%get_timestamp_index()  # [time_index, root]
push3 rootmod()         # [hrm, time_index, root]
add                     # [root_index, root]
sstore                  # []

stop                    # []
